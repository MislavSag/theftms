// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// minmax_scaler
NumericVector minmax_scaler(NumericVector x);
RcppExport SEXP _theft_minmax_scaler(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(minmax_scaler(x));
    return rcpp_result_gen;
END_RCPP
}
// zscore_scaler
NumericVector zscore_scaler(NumericVector x);
RcppExport SEXP _theft_zscore_scaler(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(zscore_scaler(x));
    return rcpp_result_gen;
END_RCPP
}
// sigmoid_scaler
NumericVector sigmoid_scaler(NumericVector x);
RcppExport SEXP _theft_sigmoid_scaler(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sigmoid_scaler(x));
    return rcpp_result_gen;
END_RCPP
}
// robustsigmoid_scaler
NumericVector robustsigmoid_scaler(NumericVector x);
RcppExport SEXP _theft_robustsigmoid_scaler(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(robustsigmoid_scaler(x));
    return rcpp_result_gen;
END_RCPP
}
// mean_scaler
NumericVector mean_scaler(NumericVector x);
RcppExport SEXP _theft_mean_scaler(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mean_scaler(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_theft_minmax_scaler", (DL_FUNC) &_theft_minmax_scaler, 1},
    {"_theft_zscore_scaler", (DL_FUNC) &_theft_zscore_scaler, 1},
    {"_theft_sigmoid_scaler", (DL_FUNC) &_theft_sigmoid_scaler, 1},
    {"_theft_robustsigmoid_scaler", (DL_FUNC) &_theft_robustsigmoid_scaler, 1},
    {"_theft_mean_scaler", (DL_FUNC) &_theft_mean_scaler, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_theft(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
